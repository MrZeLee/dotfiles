#!/usr/bin/env bash
set -euo pipefail

# robust_rename.sh
# Uso: ./robust_rename [-c "contexto"] arquivo1.pdf [arquivo2.pdf ...]
# Requisitos:
#   ocrmypdf, poppler-utils (pdftotext), curl, jq, sed, tr, grep
#   export OPENAI_API_KEY="sua_chave_aqui"

context=""
while getopts "c:" opt; do
	case $opt in
	c) context="$OPTARG " ;;
	*)
		echo "Usage: $0 [-c \"contexto\"] file.pdf‚Ä¶"
		exit 1
		;;
	esac
done
shift $((OPTIND - 1))
[[ $# -ge 1 ]] || {
	echo "Precisa de ‚â•1 PDF"
	exit 1
}

for pdf in "$@"; do
	[[ -r "$pdf" ]] || {
		echo "‚ö†Ô∏è n√£o l√™ $pdf"
		continue
	}
   	echo -e "\n=== Processando: $pdf ==="
   	dir=$(dirname "$pdf")

	# 1) Envia o arquivo para a API e obt√©m t√≠tulo multimodal
	upload_response=$(curl -sS https://api.openai.com/v1/files \
	  -H "Authorization: Bearer $OPENAI_API_KEY" \
	  -F purpose="user_data" \
	  -F file="@$pdf")
	file_id=$(jq -r '.id // empty' <<<"$upload_response")
	if [[ -z "$file_id" ]]; then
	  echo "‚ùå Falha ao enviar '$pdf'. Resposta da API:"
	  echo "$upload_response"
	  continue
	fi

	# 2) Monta payload multimodal (arquivo + prompt)
	user_prompt="${context}Gere um t√≠tulo curto para este arquivo. Se encontrar data, prefixe yyyy-mm-dd_ antes. Sem extens√£o."
  payload=$(jq -nc \
    --arg model "gpt-4.1" \
    --argjson input "$(jq -n \
       --arg role "user" \
       --arg type_file "input_file" --arg file_id "$file_id" \
       --arg type_text "input_text" --arg text "$user_prompt" \
       '[{ role: $role, content: [ { type: $type_file, file_id: $file_id }, { type: $type_text, text: $text } ] }]')" \
    --argjson temperature 0.2 \
    '{ model: $model, input: $input, temperature: $temperature }')

	# 3) Chama endpoint de ‚Äúresponses‚Äù
	response=$(curl -sS https://api.openai.com/v1/responses \
	  -H "Content-Type: application/json" \
	  -H "Authorization: Bearer $OPENAI_API_KEY" \
	  -d "$payload")
   # Extrai o texto de resposta do modelo multimodal (output array)
   title=$(jq -r '.output[0].content[0].text // empty' <<<"$response" | head -n1)
	if [[ -z "$title" ]]; then
	  echo "‚ùå Modelo n√£o retornou t√≠tulo. Resposta da API:"
	  echo "$response"
	  continue
	fi
	echo "üí° T√≠tulo bruto: $title"

	# 6) Sanitiza e renomeia com verifica√ß√£o de exist√™ncia
	safe=$(echo "$title" |
		tr -cd '[:alnum:] _-' |
		sed 's/  */ /g;s/^ //;s/ $//' |
		tr ' ' '_')
	safe="${safe:-${pdf%.*}}.pdf"
# Prompt para confirmar ou editar o novo nome do arquivo
proposed="$safe"
# mostra apenas nomes no prompt
base_pdf="${pdf##*/}"
read -rp "Renomear '$base_pdf' -> '$proposed'? [Y=Sim/E=Editar/any other=N]: " ans
case "$ans" in
    [Yy])
        new_name="$proposed"
        ;;
    [Ee])
        tmpfile=$(mktemp)
        printf "%s\n" "$proposed" > "$tmpfile"
        "${EDITOR:-vi}" "$tmpfile"
        new_name=$(<"$tmpfile")
        rm -f "$tmpfile"
        case "$new_name" in
            *.[Pp][Dd][Ff]) ;;
            *) new_name="${new_name}.pdf" ;;
        esac
        ;;
    *)
        echo "‚ùå Pulando renomea√ß√£o de '$pdf'"
        continue
        ;;
esac
dest="$dir/$new_name"
if [[ -e "$dest" ]]; then
    echo "‚ö†Ô∏è Arquivo '$dest' j√° existe, pulando renomea√ß√£o."
else
    mv -i "$pdf" "$dest"
    echo "‚úÖ Renomeado para: $dest"
fi
continue

done

echo -e "\n‚úîÔ∏è pronto."
